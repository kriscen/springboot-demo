一.yaml语法
1.基本语法
    k:(空格) v
    表示一个键值对，空格必须有
以空格缩进来控制层级关系，左对齐的一列数据，都是一个层级
    server:
      port: 8081
2.值的写法
    字面量：普通的值(数字，字符串，布尔)
        k: v        --直接写，字符串默认不用加单引号或双引号
        "":双引号   --不会转义字符串里面的特殊字符，特殊字符作为本身想表示的意思
                name: "zhangsan\n lisi"   输出  zhangsan 换行 lisi
        '':单引号   --会转义特殊字符，特殊字符最终只是一个普通的字符串数据
                name: "zhangsan\n lisi"   输出  zhangsan\n lisi

    对象，map(属性和值)
        k: v
            对象还是键值对k: v的方式
            friends:
                lastName: zhang
                age: 24
        行内写法：
            friends: {lastName: zhang,age: 18}

    数组(list,set)
        用(- 值)表示数组中的一个元素
        pets:
         -cat
         -dog
         -pig
        行内写法
        pets:[cat,dog,pig]

3.配置文件注入
    Person类
@ConfigurationProperties(prefix = "person")

@value获取值和@configurationProperties获取值作比较
                         @value
功能：                     一个个指定
松散绑定(松散语法)         不支持
SpEl:${}                     支持
JSR303数据校验              不支持
复杂类型封装                不支持


                         @configurationProperties
功能：                     批量注入配置文件属性
松散绑定(松散语法)         支持
SpEl                       不支持
JSR303数据校验             支持
复杂类型封装               支持

    1.只是在某个业务逻辑中获取一下配置文件的某个值，使用@value
    2.专门写了javaBean和配置文件进行映射，直接使用@configurationProperties


JSR303数据校验:
    @Validated
    数据验证

4.@PropertySource和@ImprotResource
@PropertySource:加载指定的配置文件
@ImprotResource:导入Spring的配置文件，让配置文件的内容生效
Springboot 里没有spring的配置文件，自己编写的配置文件也不能识别
想让spring的配置文件生效加载进来，@ImportResource标注在一个配置类上


SpringBoot推荐给容器中添加组件的方式:推荐使用全注解方式
1.配置类====spring配置文件

5.配置文件占位符
    1.随机数
        ${random.XXX}
    2.占位符获取其他配置值，没有使用(:)冒号指定默认值
        person.dog.name=${person.hello:hello}_dog

6.Profile
    多环境配置
    1.多Profile文件
        在主配置文件编写的时候，文件名可以是application-{profile}.properties/yml
        默认使用application.properties

    2.yml支持多文档块方式
        server:
          port: 8081
        spring:
          profiles:
            active: prod
        ---
        #文档块2
        server:
          port: 8083
        spring:
          profiles: dev

    3.激活指定的profile
        1.spring.profiles.active=dev
        2.命令行:
            --spring.profiles.avtice=dev
        3.虚拟机参数
            -Dspring.profiles.active=dev
7.配置文件加载位置
    1. file:./config/
    2. file:./
    3.classpath:/config/
    4.classpath:/
    按优先级从上至下，高优先级配置内容覆盖低优先级
    或者修改spring.config.location改变配置
8.外部配置加载顺序
    SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置
    1.命令行参数
        所有的配置都可以在命令行上进行指定
        java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar --server.port=8087 --server.context-path=/abc
        多个配置用空格分开； --配置项=值
    2.来自java:comp/env的JNDI属性
    3.Java系统属性（System.getProperties()）
    4.操作系统环境变量
    5.RandomValuePropertySource配置的random.*属性值
        由jar包外向jar包内进行寻找；
        优先加载带profile
    6.jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件
    7.jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件
        再来加载不带profile
    8.jar包外部的application.properties或application.yml(不带spring.profile)配置文件
    9.jar包内部的application.properties或application.yml(不带spring.profile)配置文件
    10.@Configuration注解类上的@PropertySource
    11.通过SpringApplication.setDefaultProperties指定的默认属性
9.自动配置原理
1.SpringBoot启动的时候加载主配置类，开启了自动配置功能@EnableAutoConfiguration
2.@EnableAutoConfiguration作用：
    利用AutoConfigurationImportSelector选择器给容器导入组件：
        selectImports();
            AutoConfigurationEntry autoConfigurationEntry = getAutoConfigurationEntry(
                            autoConfigurationMetadata, annotationMetadata);获取候选配置

            AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader
                            .loadMetadata(this.beanClassLoader);
            路径"META-INF/spring-autoconfigure-metadata.properties";
            将扫描到的文件内容包装成Properties
            从Properties中获取到EnableAutoConfiguration.class类对应的值添加到容器中
    每一个XXXAutoConfiguration类都是容器中的一个组件，加入容器做自动配置
3.每一个自动配置类进行自动配置功能
4.以HttpEncodingAutoConfiguration(http编码自动配置)为例解释自动配置原理
    //根据当前不同条件判断，决定这个配置类是否生效
  //表示这是一个配置类
  @Configuration
  //启动指定的类的ConfigurationProperties功能，将配置文件中的值和HttpProperties绑定，并将HttpProperties加入容器中
  @EnableConfigurationProperties(HttpProperties.class)
  //spring底层conditional注解，判断不同条件生效配置
  @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)//判断当前引用是否是web应用
  //判断当前项目有没有指定类
  @ConditionalOnClass(CharacterEncodingFilter.class)//springmvc中乱码解决的过滤器
  //判断配置文件中是否存在某个配置
  //matchIfMissing = true即使配置文件中不配置spring.http.encoding=true，配置也生效
  @ConditionalOnProperty(prefix = "spring.http.encoding", value = "enabled", matchIfMissing = true)
    //和SpringBoot的配置文件做映射
    private final HttpProperties.Encoding properties;

    //只有一个有参构造器的时候，参数的值会从容器中自动获取
    public HttpEncodingAutoConfiguration(HttpProperties properties) {
    		this.properties = properties.getEncoding();
    }

    //给容器中添加一个组件，这个组件的值从properties中获取
    @Bean
	@ConditionalOnMissingBean
	public CharacterEncodingFilter characterEncodingFilter() {
		CharacterEncodingFilter filter = new OrderedCharacterEncodingFilter();
		filter.setEncoding(this.properties.getCharset().name());
		filter.setForceRequestEncoding(this.properties.shouldForce(Type.REQUEST));
		filter.setForceResponseEncoding(this.properties.shouldForce(Type.RESPONSE));
		return filter;
	}
---
一旦配置类生效，这个配置类就会给容器中添加组件，这些组件的属性从对应的properties中获取，
这些类里面的每一个属性和配置文件绑定。

精髓：
1）springboot启动会加载大量的自动配置类
2）看需要的功能有没有springboot默认写好的自动配置类
3）看自动配置类中配置了哪些组件(只要需要用的组件有，我们就不需要再来配置)
4）给容器中自动配置类添加组件的时候，会从properties类中获取某些属性，就可以在配置文件中指定这些属性

XXXAutoConfiguration:自动配置类：给容器中添加组件
XXXProperties：封装配置文件中相关属性

5.所有配置文件中能配置的属性都是在XXX.properties类中封装，配置文件配置什么就可以参照某个功能对应的这个属性类


2.细节
1.@Conditional派生注解(@Conditional)
作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置类里面的内容才有生效

ConditionalOnXXX都是基于Conditional的注解


查看哪些自动配置类生效
debug=true
查看自动配置报告






